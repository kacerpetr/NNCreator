/*
 * This file is part of Neural network Creator, backpropagation
 * simulator and multilayer neural network IDE.
 * Copyright (C) 2013  Petr Kaƒçer <kacerpetr@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "DatasetEditWidget.h"
#include "ui_DatasetEditWidget.h"
#include <QDebug>
#include <QMenu>
#include <QClipboard>

namespace Application{

/**
 * Class constructor.
 */
DatasetEditWidget::DatasetEditWidget(QWidget *parent):
	QWidget(parent),
    ui(new Ui::DatasetEditWidget),
	model(NULL),
	contextMenu(NULL)
{
    //autogenerated stuff
	ui->setupUi(this);

    //connects signals and slots
	connect(ui->tableView, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(showContextMenu()));
	connect(ui->patternCountBox, SIGNAL(valueChanged(int)), this, SLOT(changePatternCount(int)));
	connect(ui->inputCountBox, SIGNAL(valueChanged(int)), this, SLOT(changeInputCount(int)));
	connect(ui->outputCountBox, SIGNAL(valueChanged(int)), this, SLOT(changeOutputCount(int)));
	connect(ui->closeButton, SIGNAL(pressed()), this, SLOT(closeBtnPressed()));

	//context menu of editor
	contextMenu = new QMenu(this);
    contextMenu->addAction(tr("Cut"), this, SLOT(cutCell()), Qt::CTRL | Qt::Key_X);
    contextMenu->addAction(tr("Copy"), this, SLOT(copyCell()), Qt::CTRL | Qt::Key_C);
    contextMenu->addAction(tr("Paste"), this, SLOT(pasteCell()), Qt::CTRL | Qt::Key_V);
    contextMenu->addAction(tr("Delete"), this, SLOT(deleteCell()), Qt::Key_Delete);
	this->addActions(contextMenu->actions());
}

/**
 * Class destructor.
 */
DatasetEditWidget::~DatasetEditWidget(){
	delete ui;
}

/**
 * Called when model is changed.
 * @param type type of model change
 */
void DatasetEditWidget::modelChanged(ChangeType type){
	if(type == ModelRenamed)
		ui->itemName->setText(model->name());
}

/**
 * Shows context menu that contains some actions to edit table view.
 */
void DatasetEditWidget::showContextMenu(){
	contextMenu->popup(QCursor::pos());
	contextMenu->exec();
}

/**
 * Sets new user defined pattern count in current model.
 */
void DatasetEditWidget::changePatternCount(int value){
	if(model == NULL) return;
	model->setPatternCount(value);
	model->setSaved(false);
}

/**
 * Sets new user defined input count in current model.
 */
void DatasetEditWidget::changeInputCount(int value){
	if(model == NULL) return;
	model->setInputCount(value);
	model->setSaved(false);
}

/**
 * Sets new user defined output count in current model.
 */
void DatasetEditWidget::changeOutputCount(int value){
	if(model == NULL) return;
	model->setOutputCount(value);
	model->setSaved(false);
}

/**
 * Emits closePressed signal when close button is pressed.
 */
void DatasetEditWidget::closeBtnPressed(){
	emit closePressed(model);
}

/**
 * Stores value and state of selected cell in variable.
 */
void DatasetEditWidget::copyCell(){
    QClipboard* clipboard = QApplication::clipboard();
    QModelIndex index = ui->tableView->currentIndex();
    clipboard->setText(model->viewModel()->data(index, Qt::DisplayRole).toString());
	ui->tableView->update(index);
}

/**
 * Stores value and state of selected cell in variable and clears it.
 */
void DatasetEditWidget::cutCell(){
    QClipboard* clipboard = QApplication::clipboard();
	QModelIndex index = ui->tableView->currentIndex();
    clipboard->setText(model->viewModel()->data(index, Qt::DisplayRole).toString());
	model->viewModel()->clearCell(index);
	model->setSaved(false);
	ui->tableView->update(index);
}

/**
 * Pastes value from previously defined variable to selected cell.
 */
void DatasetEditWidget::pasteCell(){
    QClipboard* clipboard = QApplication::clipboard();
    QModelIndex index = ui->tableView->currentIndex();
    bool ok = false;
    double editVal = clipboard->text().toDouble(&ok);
    if(ok){
        model->viewModel()->setData(index, editVal, Qt::EditRole);
        model->setSaved(false);
        ui->tableView->update(index);
    }
}

/**
 * Clears selected cell.
 */
void DatasetEditWidget::deleteCell(){
	QModelIndex index = ui->tableView->currentIndex();
	model->viewModel()->clearCell(index);
	model->setSaved(false);
	ui->tableView->update(index);
}

/**
 * Sets given model to edit widget.
 */
void DatasetEditWidget::setModel(DatasetEditModel* model){
	//sets model
	this->model = model;

	//sets view for NULL model
	if(model == NULL){
		ui->itemName->setText(QString());
		ui->tableView->setModel(NULL);
		ui->patternCountBox->setValue(1);
		ui->inputCountBox->setValue(1);
		ui->outputCountBox->setValue(1);
	}
	//sets view to show model data
	else{
		bool saved = model->isSaved();
		ui->itemName->setText(model->name());
		ui->tableView->setModel(model->viewModel());
		ui->patternCountBox->setValue(model->minPatternCount());
		ui->inputCountBox->setValue(model->minInputCount());
		ui->outputCountBox->setValue(model->minOutputCount());
		connect(model, SIGNAL(changed(ChangeType)), this, SLOT(modelChanged(ChangeType)), Qt::UniqueConnection);
		model->setSaved(saved);
	}
}

/**
 * Returns true if widget has some model.
 */
bool DatasetEditWidget::hasModel(){
	return model != NULL;
}

}
