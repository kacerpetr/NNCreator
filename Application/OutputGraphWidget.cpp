#include "OutputGraphWidget.h"
#include "ui_OutputGraphWidget.h"
#include "GuiPart/Plot1D.h"
#include "Project/DatasetEditModel.h"

namespace Application{

/**
 * Class constructor.
 */
OutputGraphWidget::OutputGraphWidget(QWidget *parent):
    QWidget(parent),
    ui(new Ui::OutputGraphWidget),
    model(NULL)
{
    //autogenerated stuff
    ui->setupUi(this);

    //connects signals and slots
	connect(ui->closeButton, SIGNAL(pressed()), this, SLOT(closeBtnPressed()));
	connect(ui->drawButton, SIGNAL(pressed()), this, SLOT(drawGraph()));
	connect(ui->outputBox, SIGNAL(valueChanged(int)), this, SLOT(outputChanged(int)));
    connect(ui->networkBox, SIGNAL(activated(QString)), this, SLOT(networkSelected(QString)));
}

/**
 * Class destructor.
 */
OutputGraphWidget::~OutputGraphWidget(){
	delete ui;
}

/**
 * Sets given model to edit widget.
 */
void OutputGraphWidget::setModel(GraphTestModel* model){
	this->model = model;

    //disables certain parts of GUI
    ui->drawButton->setEnabled(false);
    ui->outputBox->setEnabled(false);

    //clears model name label if NULL given
	if(model == NULL){
		ui->itemName->setText(QString());
    }
    //fills view with model data
    else{
		bool saved = model->isSaved();
		ui->itemName->setText(model->name());
        ui->outputBox->setValue(model->output());
        genNetworkList();
		setPlot();
		connect(model, SIGNAL(changed(ChangeType)), this, SLOT(modelChanged(ChangeType)), Qt::UniqueConnection);
        if(model->hasSettings() && model->plot() == NULL) drawGraph();
        model->setSaved(saved);
	}
}

/**
 * Called when model is changed.
 * @param type type of model change
 */
void OutputGraphWidget::modelChanged(ChangeType type){
	if(type == ModelRenamed)
		ui->itemName->setText(model->name());
	else if(type == SelectedNetworkRenamed)
        genNetworkList();
	else if(type == SelectedDatasetRenamed)
        genNetworkList();
	else if(type == SelectedNetworkDeleted)
        genNetworkList();
	else if(type == SelectedDatasetDeleted)
        genNetworkList();
}

/**
 * Draws and shows plot.
 */
void OutputGraphWidget::drawGraph(){
	model->drawPlot();
	setPlot();
}

/**
 * Adds model's plot to layout.
 * @param plot will be removed from layout when NULL given
 */
void OutputGraphWidget::setPlot(){
    //removes plot from layout and hides it
    if(!ui->graphFrame->layout()->isEmpty()){
        QWidget* wg = ui->graphFrame->layout()->takeAt(0)->widget();
        if(wg != NULL){
            ui->graphFrame->layout()->removeWidget(wg);
            wg->hide();
        }
    }

    //adds new plot to layout
    if(model->plot() != NULL){
        ui->graphFrame->layout()->addWidget(model->plot());
        model->plot()->show();
    }
}

/**
 * Adds and selects saved network and dataset names to list boxes.
 */
void OutputGraphWidget::genNetworkList(){
    //clears selection box and adds existing networks names
    ui->networkBox->clear();
    ui->networkBox->addItem(QString(tr("<Choose neural network>")));
    QStringList nets = model->networkList();
    if(!nets.isEmpty()) ui->networkBox->addItems(nets);

    //looks for selected network name in selection box
    int index = ui->networkBox->findText(model->selectedNetworkName());

    //selects widget that was found
    if(index > 0){
        ui->networkBox->setCurrentIndex(index);
        networkSelected(model->selectedNetworkName());
    }
}

/**
 * Called when neural network selected.
 * @param name selected network name
 */
void OutputGraphWidget::networkSelected(QString name){
    //clears selections and disables GUI items if
    //first item (dummy item) is selected
    if(ui->networkBox->currentIndex() < 1){
        model->selectNetwork(QString());
        ui->drawButton->setEnabled(false);
        ui->outputBox->setEnabled(false);
        return;
    }

    //stores selected network name in model
    model->selectNetwork(name);

    //gets selected network model
    BaseModel* mdlBase = model->selectedNetwork();
    Q_ASSERT(mdlBase != NULL);
    TopologyEditModel* mdl = (TopologyEditModel*)mdlBase;

    //sets gui items
    ui->outputBox->setMaximum(mdl->outputCount());
    ui->outputBox->setEnabled(true);
    ui->drawButton->setEnabled(true);
}

/**
 * Called when output number is changed.
 */
void OutputGraphWidget::outputChanged(int value){
    if(value == 0 && (model->network()->inputCount() != 2 || model->network()->outputCount() <= 1))
        ui->drawButton->setEnabled(false);
    else if(value > 0)
        ui->drawButton->setEnabled(true);

	model->setOutput(value);
}

/**
 * Returns true if widget has some model.
 */
bool OutputGraphWidget::hasModel(){
	return model != NULL;
}

/**
 * Emits closePressed signal when close button is pressed.
 */
void OutputGraphWidget::closeBtnPressed(){
	emit closePressed(model);
}

}
