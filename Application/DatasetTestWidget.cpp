#include "DatasetTestWidget.h"
#include "ui_DatasetTestWidget.h"
#include <QDebug>

namespace Application{

/**
 * Class constructor.
 */
DatasetTestWidget::DatasetTestWidget(QWidget *parent):
    QWidget(parent),
    ui(new Ui::DatasetTestWidget),
    model(NULL)
{
    //autogenerated stuff
	ui->setupUi(this);

    //connects signals and slots
	connect(ui->closeButton, SIGNAL(pressed()), this, SLOT(closeBtnPressed()));
	connect(ui->startTestBtn, SIGNAL(pressed()), this, SLOT(startTest()));
	connect(ui->datasetBox, SIGNAL(activated(QString)), this, SLOT(datasetSelected(QString)));
	connect(ui->networkBox, SIGNAL(activated(QString)), this, SLOT(networkSelected(QString)));

    //empty dataset model
	emptyModel = new DatasetEditModel();
	emptyModel->setPatternCount(0);
}

/**
 * Class destructor.
 */
DatasetTestWidget::~DatasetTestWidget(){
	delete ui;
	delete emptyModel;
}

/**
 * Sets given model to edit widget.
 */
void DatasetTestWidget::setModel(DatasetTestModel* model){
	this->model = model;

    //disables start button
	ui->startTestBtn->setEnabled(false);
    //sets empty model to dataset view
    ui->datasetView->setModel(emptyModel->viewModel());

    //clears model name label if NULL given
    if(model == NULL){
		ui->itemName->setText(QString());
    }
    //fills view with model data
    else{
		bool saved = model->isSaved();
		ui->itemName->setText(model->name());
        genNetworkList();
        connect(
            model,
            SIGNAL(changed(ChangeType)),
            this,
            SLOT(modelChanged(ChangeType)),
            Qt::UniqueConnection
        );
		model->setSaved(saved);
	}
}

/**
 * Starts test and fills output table.
 */
void DatasetTestWidget::startTest(){
	long time = 0;
	double err = 0;

    //runs feedforward test
	QList<QList<double > > errs = model->runTest(time, err);

    //shows feedforward time and network error
    ui->ffTimeEdit->setText(QString::number(time) + " ns");
	ui->totalErrorEdit->setText(QString::number(err));


	if(errs.isEmpty()) return;

    //row and column counts
	int tptCnt = errs.length();
	int outCnt = errs[0].length();
	ui->errorTable->setRowCount(tptCnt);
	ui->errorTable->setColumnCount(outCnt);

    //generates horizontal headers
	QStringList hList;
	for(int i = 0; i < outCnt; i++){
		if(i == 0)
			hList.append("Pt err");
		else{
			hList.append("Out " + QString::number(i));
			hList.append("Out " + QString::number(i) + " err");
		}
	}

    //generates vertical headers
	QStringList vList;
	for(int i = 0; i < tptCnt; i++){
		vList.append("Pt" + QString::number(i+1) + " errs");
	}

    //sets horizontal and vertical headers
	ui->errorTable->setHorizontalHeaderLabels(hList);
	ui->errorTable->setVerticalHeaderLabels(vList);

    //fills table with data
	for(int i = 0; i < tptCnt; i++){
		for(int j = 0; j < outCnt; j++){
			QTableWidgetItem* item = new QTableWidgetItem();
			item->setText(QString::number(errs[i][j]));
			ui->errorTable->setItem(i, j, item);
		}
	}
}

/**
 * Adds and selects saved network and dataset names to list boxes.
 */
void DatasetTestWidget::genNetworkList(){
    //clears selection box and adds existing networks names
    ui->networkBox->clear();
    ui->networkBox->addItem(QString(tr("<Choose neural network>")));
    QStringList nets = model->networkList();
    if(!nets.isEmpty()) ui->networkBox->addItems(nets);

    //looks for selected network name in selection box
    int index = ui->networkBox->findText(model->selectedNetworkName());

    //selects widget that was found
    if(index > 0){
        ui->networkBox->setCurrentIndex(index);
        networkSelected(model->selectedNetworkName());
    }
    //or just clears dataset selection box
    else{
        ui->datasetBox->clear();
        ui->datasetBox->addItem(QString(tr("<No network selected>")));
    }
}

/**
 * Called when neural network selected.
 * @param name selected network name
 */
void DatasetTestWidget::networkSelected(QString name){
    //clears selections and disables GUI items if
    //first item (dummy item) is selected
    if(ui->networkBox->currentIndex() < 1){
        model->selectNetwork(QString());
        ui->datasetBox->clear();
        ui->datasetBox->setEnabled(false);
        ui->startTestBtn->setEnabled(false);
        return;
    }

    //stores selected network name in model
    model->selectNetwork(name);

    //clears and enable dataset selection box
    ui->datasetBox->clear();
    ui->datasetBox->setEnabled(true);

    //gets list of possible datasets for selected network
    QStringList list = model->datasetList(name);

    //if there is no possible datasets
    if(list.isEmpty()){
        ui->datasetBox->addItem(QString(tr("<No dataset available for this network>")));
    }
    //fills dataset selection box and tries to select selected name in select box
    else{
        ui->datasetBox->addItem(QString(tr("<Select training dataset>")));
        ui->datasetBox->addItems(list);
        if(!model->selectedDatasetName().isEmpty()){
            int index = ui->datasetBox->findText(model->selectedDatasetName());
            if(index > 0){
                ui->datasetBox->setCurrentIndex(index);
                datasetSelected(model->selectedDatasetName());
            }
        }
    }
}

/**
 * Called when dataset selected.
 */
void DatasetTestWidget::datasetSelected(QString name){
    //clears selections and disables GUI items if
    //first item (dummy item) is selected
    if(ui->datasetBox->currentIndex() < 1){
        model->selectDataset(QString());
        ui->startTestBtn->setEnabled(false);
        return;
    }

    //stores selected dataset name in model
    model->selectDataset(name);

    //gets selected dataset and sets table view model
    BaseModel* mdl = model->selectedDataset();
    Q_ASSERT(mdl != NULL);
    DatasetEditModel* mdl2 = (DatasetEditModel*)mdl;
    ui->datasetView->setModel(mdl2->viewModel());

    //enables start button
    ui->startTestBtn->setEnabled(true);

    //starts test
    startTest();
}

/**
 * Returns true if widget has some model.
 */
bool DatasetTestWidget::hasModel(){
	return model != NULL;
}

/**
 * Emits closePressed signal when close button is pressed.
 */
void DatasetTestWidget::closeBtnPressed(){
	emit closePressed(model);
}

/**
 * Called when model is changed.
 * @param type type of model change
 */
void DatasetTestWidget::modelChanged(ChangeType type){
	if(type == ModelRenamed)
		ui->itemName->setText(model->name());
	else if(type == SelectedNetworkRenamed)
        genNetworkList();
	else if(type == SelectedDatasetRenamed)
        genNetworkList();
	else if(type == SelectedNetworkDeleted)
        genNetworkList();
	else if(type == SelectedDatasetDeleted)
        genNetworkList();
}

}
